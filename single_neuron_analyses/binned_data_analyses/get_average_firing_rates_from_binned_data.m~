function [stimulus_time_average_FR_matrix site_time_stimulus_activity_matrix] = get_average_firing_rates_from_binned_data(binned_file_name, stimulus_label_name, normalization_type, stimulus_names_to_use)

% This function takes the name of a binned data file and computes the average firing rate for each neuron (at each time point) to each stimulus.
%  These results are then averaged over all neurons (normalizing each neuron first as specified), and the results for each stimulus and time are 
%  returned as a matrix.
%
%  The input arguments to this function are:
%
%   1. binned_file_name: the name of a data file in binned-format
%
%   2. stimulus_label_name: the name of the stimulus labels to use.  For each stimulus, the average of all trials will be computed (so if different stimuli have
%       different numbers of trials, then the average for each stimulus will be based on a different number of trials).  If stimulus_label_name is empty
%       (or an empty string) then the firing rate is computed over all trials disregarding which stimulus was shown on each trial.  
%
%  Optional input arguments to this function are:
%
%   3.  normalization_type (default = 0): The normalization that is applied to each neuron before all the neurons are averaged together.  If this is set to 0 then 
%         no normalization is applied.  If this value is set to 1 then each neuron's activity is z-score normalized so that it has a mean of 0 and a standard deviation
%         of 1, taken over all stimuli and time points.  If this value is to 2 then each neuron's activity is 0-1 normalized so that it has a maximum of 1 to the stimulus 
%         with the highest firing rate at the optimal tiem and a value of zero to the stimulus with the loweset firing rate at the lowest time point.   
%
%   4.  stimulus_names_to_use (default = []):  If this is set to a cell array, then only stimulus names in this cell array will be used. If this is not set, then all
%         stimuli that the first site has will be used.
%
%   5.  weight firing rate average based on how many stimuli there are per stimulus condition
%
%
%  The results returned by this function are:
%
%   1.  stimulus_time_average_FR_matrix:
%   2.  site_time_stimulus_activity_matrix:  
%



if nargin < 4
    stimulus_names_to_use = [];
end


all_bined_format_data = load(binned_file_name);


if isempty(stimulus_label_name) || strcmp(stimulus_label_name, '');

    if ~isempty(stimulus_names_to_use)
        error('if stimulus_label_name is empty or set to an empty string, then stimulus_names_to_use can not be set')
    end
    
    for iSite = 1:numel(all_bined_format_data.binned_data)   
        site_time_stimulus_activity_matrix(iSite, :) = mean(all_bined_format_data.binned_data{iSite});        
    end
    
else

    
    labels_to_use = eval(['all_bined_format_data.binned_labels.' stimulus_label_name]);

    % If the labels are a cell array of strings, convert them to numbers
    if iscell(labels_to_use)

        [labels_to_use string_to_number_mapping] = convert_label_strings_into_numbers(labels_to_use);

        % only used specified strings
        if ~isempty(stimulus_names_to_use)
            stimulus_names_to_use = find(ismember(string_to_number_mapping, stimulus_names_to_use))
        end

    end


    if isempty(stimulus_names_to_use)
        stimulus_names_to_use = unique(labels_to_use{1});
    end

    
    for iSite = 1:numel(all_bined_format_data.binned_data)   
        
        for iStim = 1:numel(stimulus_names_to_use)
            curr_inds = find(labels_to_use{iSite} == stimulus_names_to_use(iSite));           
            site_time_stimulus_activity_matrix(iSite, :, iStim) = mean(all_bined_format_data.binned_data{iSite}(curr_inds, :));          
        end
            
    end
    
    
    
 
end
    
    
    











keyboard
































